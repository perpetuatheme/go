//go:build ignore

package main

import (
	"encoding/json"
	"iter"
	"log"
	"net/http"
	"os"
	"strings"
	"text/template"
)

type rgb struct {
	R int `json:"r"`
	G int `json:"g"`
	B int `json:"b"`
}

type okhsl struct {
	H float64 `json:"h"`
	S float64 `json:"s"`
	L float64 `json:"l"`
}

type color struct {
	Name  string `json:"name"`
	Index int    `json:"index"`
	Hex   string `json:"hex"`
	RGB   rgb    `json:"rgb"`
	Okhsl okhsl  `json:"okhsl"`
}

type colors map[string]color

func (c colors) AllByIndex() iter.Seq2[int, color] {
	return func(yield func(int, color) bool) {
		cur := 0
		for cur < len(c) {
			for _, v := range c {
				if v.Index != cur {
					continue
				}
				if !yield(cur, v) {
					return
				}
				cur++
			}
		}
	}
}

type palette struct {
	Name   string `json:"name"`
	Index  int    `json:"index"`
	Colors colors `json:"colors"`
}

type palettes struct {
	Version string  `json:"version"`
	Light   palette `json:"light"`
	Dark    palette `json:"dark"`
}

func main() {
	r, err := http.Get("https://raw.githubusercontent.com/perpetuatheme/perpetua/refs/heads/main/palettes.json")
	if err != nil {
		log.Fatal(err)
	}
	palettes := palettes{}
	dec := json.NewDecoder(r.Body)
	if err := dec.Decode(&palettes); err != nil {
		log.Fatal(err)
	}

	generate(palettes.Light)
	generate(palettes.Dark)
}

func generate(p palette) {
	name := strings.ToLower(p.Name)

	f, err := os.Create(name + ".go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	t := template.Must(template.New("tmplPalette").Parse(tmplPalette))
	err = t.Execute(f, struct {
		Type string
		palette
	}{
		Type:    name,
		palette: p,
	})
	if err != nil {
		log.Fatal(err)
	}

	t = template.Must(template.New("tmplColorFunc").Parse(tmplColorFunc))
	for i, c := range p.Colors.AllByIndex() {
		err = t.Execute(f, struct {
			Type     string
			FuncName string
			color
		}{
			Type:     name,
			FuncName: strings.ReplaceAll(c.Name, " ", ""),
			color:    c,
		})
		if err != nil {
			log.Fatal(err)
		}
		if i < len(p.Colors)-1 {
			f.WriteString("\n")
		}
	}
}

const tmplPalette = `// Code generated by generate.go. DO NOT EDIT.

package perpetua

import (
	"image/color"

	internalcolor "github.com/perpetuatheme/go/internal/color"
)

type {{ .Type }} struct{}

var {{ .Name }} Palette = {{ .Type }}{}

func ({{ .Type }}) Name() string {
	return "{{ .Name }}"
}

`

const tmplColorFunc = `func ({{ .Type }}) {{ .FuncName }}() Color {
	return Color{
		Name:  "{{ .Name }}",
		Index: {{ .Index }},
		hex:   "{{ .Hex }}",
		rgb:   color.RGBA{R: {{ .RGB.R }}, G: {{ .RGB.G }}, B: {{ .RGB.B }}, A: 255},
		okhsl: internalcolor.Okhsl{H: {{ .Okhsl.H }}, S: {{ .Okhsl.S }}, L: {{ .Okhsl.L }}},
	}
}
`
